# üåü **MLF** | Monitoring-Live-Finance üåü

MLF - Monitoring Live Finance is a **Full-Stack portfolio app** for **simulated** stock portfolio management and **real-time data** visualisation on a modern Full-Stack Monorepo architecture.

[// Badges: Placeholder for CI/CD, deployment status, and code quality badges]

---

## üñºÔ∏è Project Showcase

[// Placeholder: Add a GIF or screenshot of the application dashboard here once the frontend is built!]

---

## üèóÔ∏è Architecture & Technology Stack

This project leverages a **Monorepo** structure to ensure shared standards, code consistency, and simplified atomic commits across the entire application lifecycle.

### üíª Frontend (`client/`)

- **Technology Stack:** **React, TypeScript, Vite, Tailwind CSS**
- **Key Role:** Builds the **responsive User Interface (UI)**, handles client-side routing, and renders complex **Data Visualizations** (charts and dashboards).

### ‚öôÔ∏è Backend (`server/`)

- **Technology Stack:** **Node.js, Express, TypeScript, ORM** (e.g., Prisma/TypeORM)
- **Key Role:** Exposes the **RESTful API**, manages business logic, performs secure **Data Fetching** from external financial APIs, and interacts with the Database.

### üíæ Database / Data Persistence

- **Technologies:** **PostgreSQL/MySQL** (managed via Docker)
- **Key Role:** Provides a reliable persistence layer for securely storing user data, portfolio holdings, and transaction history.

---

## ‚ú® Key Features

- **Real-time Data Integration:** Secure integration with a public Financial API to fetch up-to-date stock and asset pricing.
- **Simulated Portfolio Management:** Allows users to execute virtual Buy/Sell transactions and track their investment performance over time.
- **Performance Monitoring:** Interactive dashboards and charts to visualize gains/losses, historical data, and portfolio allocation.
- **Secure User Authentication:** Implements robust login, registration, and user profile management.

---

## ‚öôÔ∏è Getting Started (Local Setup)

To run this project locally, ensure you have the necessary prerequisites installed and follow these steps.

### Prerequisites

- Node.js (v18+)
- **Docker** (Highly recommended for easy database setup)

### 1. Initial Setup and Configuration

````bash
# Clone the repository
git clone [https://github.com/MLF-tech/MLF-Monitoring-Live-Finance.git](https://github.com/MLF-tech/MLF-Monitoring-Live-Finance.git)
cd MLF-Monitoring-Live-Finance

# Create the environment file for secrets
cp .env.example .env

# IMPORTANT: Update the .env file with your specific API key and database connection string.

# Example .env file structure
FINANCIAL_API_KEY=your_api_key_here
DATABASE_URL=your_database_connection_string_here

---

### 2. Backend Initialisation and Start (server/)

```bash
# Navigate to the backend directory
cd server

# Initialize Node.js project (creates package.json)
npm init -y

# Install core dependencies (Express, Cors, Dotenv) and TypeScript development tools/types
npm install express cors dotenv && \
npm install typescript ts-node ts-node-dev @types/node @types/express @types/cors --save-dev

# Initialize and configure TypeScript (creates tsconfig.json)
npx tsc --init
# NOTE: Edit tsconfig.json to set "module": "CommonJS", "rootDir": "./src", etc.

# Create source structure and base file
mkdir src
touch src/index.ts

# NOTE: Insert the base Express server code into src/index.ts

# Update "scripts" section in package.json with the following:
# "start": "ts-node src/index.ts",
# "dev": "ts-node-dev src/index.ts",

# Start the Node.js API server in development mode (with auto-restart on file changes)
npm run dev

# The server should start on http://localhost:4000

----

üíª Frontend Initialisation and Start (client/)
Bash

# Navigate back to the root and then into the frontend directory
cd ..
cd client

# Install dependencies (To be implemented)
# npm install

# Start the React client (To be implemented)
# npm run dev

---

üìû Contact & Licensing
Developed by Maria-Laura Fagioli | (https://www.linkedin.com/in/marialaurafagioli/)

This project is licensed under the MIT License - see the LICENSE file for details.
````
